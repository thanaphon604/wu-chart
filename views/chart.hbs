<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.js" integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=" crossorigin="anonymous"></script>
    <link href="https://fonts.googleapis.com/css?family=Merriweather:300,400,700" rel="stylesheet">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ" crossorigin="anonymous">
    <title>{{chartName}}</title>
    <style>
        body {
            background-color: #673AB7;
        }
        .node {
            font: 300 11px "Helvetica Neue", Helvetica, Arial, sans-serif;
            fill: #bbb;
        }

        .node:hover {
            fill: #000;
        }

        .link {
            stroke: #2ecc71;
            stroke-opacity: 0.2;
            fill: none;
            pointer-events: none;
        }

        .node:hover,
        .node--source,
        .node--target {
            
            stroke: #fff;
            fill: #fff;
        }

        .node--source {
            fill: #fff;
        }

        .node--target {
            fill: #fff;
        }

        .link--source,
        .link--target {
            stroke-opacity: 1;
            stroke-width: 2px;
            stroke: #fff;
        }

        .link--source {
            stroke: #fff;
        }

        .link--target {
            stroke: #fff;
        }

        #description{
            margin-right: 35px;
            background-color: #673AB7;
        }

        #description ul li {
            font-size: 24px;
            line-height: 32px;
            color: rgb(255, 255, 255, 0.8);
            list-style-type: none ;
            margin-top: 6px;
        }

        #description ul li span {
            font-size: 60px;
            line-height: 32px;
            font-weight: lighter;
            padding-right: 8px;
            margin-top: 4px;
        }

        #main-title{
            color: #fff;
            font-size: 28px;
            font-weight: bold;
            padding-left: 40px;
            margin-bottom: 0px;
        }

        #myPopup {
            width: 528px;
            height: 297px;
            background-color: #fff;
            border: 3px solid #000;
            border-radius: 8px;
            overflow: hidden;
            background-size: 100% 360px;
            background-position: center;
        }
        #main-show {
            position:absolute;
            left:0px;
            top:0px;
        }

        .clearfix::after {
            content: "";
            clear: both;
            display: table;
        }
        

    </style>
    <script type="text/javascript">
        if (screen.width <= 700) {
            alert('1234test')
            document.location = "https://wu-chart.herokuapp.com/edit";
        }
    </script>
</head>
<body>
    <div id="description">
        <h3 id="main-title"></h3>
        <ul id="group-list" style="margin-top: 15px;">
        </ul>
        <div class="clearfix"></div>
    </div>

    
    
    <div>
        <div style="width: 700; height: 700; background-color: red;" id="main-show"></div>
        <div style="float: left;" id="myPopup">
            <div style="display: flex; flex-direction: column; align-items: flex-end;">
                <div style="display: flex">
                    <i id="openDocBtn" onclick="openDoc()" style="font-size: 25px; padding: 6px; color: #43A047; background-color: #fff;" class="fas fa-file-alt"></i>
                </div>
            </div>
        </div>
        <div class="clearfix"></div>
    </div>

    

    <script>
        let chartName = "{{chartName}}";
        let groupCount = {{groupCount}};
        let groupColors = "{{groupColors}}";
        let groupNames = "{{groupNames}}";
        let fontSize = {{fontSize}};
        let circleSize = {{circleSize}};
        let data = "{{data}}";
        data = JSON.parse(decodeURI(data))
        groupColors = JSON.parse(decodeURI(groupColors))
        groupNames = JSON.parse(decodeURI(groupNames))
        
        console.log('chartName:', chartName)
        console.log('groupCount:', groupCount)
        console.log('groupColors:', groupColors)
        console.log('groupNames:', groupNames)
        console.log('fontSize:', fontSize)
        console.log('circleSize:', circleSize)
        console.log('data:', data)

        $(document).ready(function() {
            $('#main-title').html(chartName)
            let stringList = ''
            for(let i=0;i<groupCount;i++) {
                if(groupNames[i].charAt(0)=='!') {
                    groupNames[i] = groupNames[i].substr(1)
                }
                stringList += '<li style="float: left; margin-right: 25px ;color: '+groupColors[i]+';"><span style="color: '+groupColors[i]+';">â– </span>'+groupNames[i]+'</li>'
            }
            $('#group-list').html(stringList)

        })

        {{!-- let circleSize = 120  --}}
        var diameter = 700,
            radius = diameter / 2,
            innerRadius = circleSize; // circle size 120-360

        var cluster = d3.cluster()
            .size([360, innerRadius]);

        var line = d3.radialLine()
            .curve(d3.curveBundle.beta(0.85))
            .radius(function(d) { return d.y; })
            .angle(function(d) { return d.x / 180 * Math.PI; });


        var svg = d3.select("#main-show").append("svg")
            .attr("width", diameter)
            .attr("height", diameter)
            .attr("class", "row")
            .append("g")
            .attr("transform", "translate(" + radius + "," + radius + ")")
            .attr("class", "col-sm-4")

        var link = svg.append("g").selectAll(".link"),
            node = svg.append("g").selectAll(".node");


        d3.json("https://wu-chart.herokuapp.com/views/"+chartName+".json", function(error, classes) {
            if (error) throw error;

            console.log('class:', classes)

            var root = packageHierarchy(classes)
                .sum(function(d) { return d.size; });

            cluster(root);

            link = link
                .data(packageImports(root.leaves()))
                .enter().append("path")
                .each(function(d) { d.source = d[0], d.target = d[d.length - 1]; })
                .attr("class", "link")
                .attr("d", line);

            node = node
                .data(root.leaves())
                .enter().append("text")
                .attr("class", "node")
                .attr("dy", "0.31em")
                .attr("transform", function(d) { return "rotate(" + (d.x - 90) + ")translate(" + (d.y + 8) + ",0)" + (d.x < 180 ? "" : "rotate(180)"); })
                .attr("text-anchor", function(d) { return d.x < 180 ? "start" : "end"; })
                .text(function(d) { return d.data.key; })
                .on("mouseover", mouseovered)
                .on("mouseout", mouseouted);


            $(document).ready(function() {
                
                let fSize = fontSize ; //7-15
                let _1nodeColor = '#ffff00'; 
                let _2nodeColor = '#00ffff'; 

                let myNodes = document.getElementsByClassName('node')
                for(let i=0;i<classes.length;i++) {
                    let gNo = classes[i].groupNumber
                    myNodes[i].classList.add(""+gNo)
                }

                for(let i=0;i<groupCount;i++) {
                    $('.'+(i+1)).css('fill', groupColors[i])
                    console.log(groupColors[i])
                    $("."+(i+1)).hover(function() {
                        $(this).css("fill", '#fff')
                    }, function() {
                        $(this).css("fill", groupColors[i])
                    });
                }

                $(".node").css("font-size", fSize+"px");
                $(".node").css("cursor", "pointer");

                let allNode = document.getElementsByClassName('node')
                for(let i=0;i<allNode.length;i++) {
                    allNode[i].setAttribute("data-url", classes[i].url)
                    allNode[i].setAttribute("data-img", classes[i].imgName)
                    console.log('url'+i+':', classes[i].url)
                    console.log('img'+i+':', classes[i].imgName)
                }

                $(".node").on('click', function() {
                    let url = $(this).attr("data-url")
                    let imgName = $(this).attr("data-img")
                    $('#myPopup').css("display", "unset")
                    $('#myPopup').attr("data-url", url)
                    $('#myPopup').attr("data-img", imgName)
                    let urlString = 'url("https://wu-chart.herokuapp.com/uploads/'+imgName+'")'
                    $('#myPopup').css("background-image", urlString)
                })

                $('svg').center()
                //test
                
            })


        });

        jQuery.fn.center = function () {
            this.css("position","absolute");
            this.css("top", "0 px");
            this.css("left", "0 px");
            return this;
        }

        function mouseovered(d) {
            node
                .each(function(n) { n.target = n.source = false; });

            link
                .classed("link--target", function(l) { if (l.target === d) return l.source.source = true; })
                .classed("link--source", function(l) { if (l.source === d) return l.target.target = true; })
                .filter(function(l) { return l.target === d || l.source === d; })
                .raise();

            node
                .classed("node--target", function(n) { return n.target; })
                .classed("node--source", function(n) { return n.source; });

        }

        function mouseouted(d) {
            link
                .classed("link--target", false)
                .classed("link--source", false);

            node
                .classed("node--target", false)
                .classed("node--source", false);
        }
       
        function packageHierarchy(classes) {
            var map = {};

            function find(name, data) {
                var node = map[name], i;
                if (!node) {
                    node = map[name] = data || {name: name, children: []};
                    if (name.length) {
                        node.parent = find(name.substring(0, i = name.lastIndexOf(".")));
                        node.parent.children.push(node);
                        node.key = name.substring(i + 1);
                    }
                }
                return node;
            }

            classes.forEach(function(d) {
                find(d.name, d);
            });
            return d3.hierarchy(map[""]);
        }

        function packageImports(nodes) {
            var map = {},
                imports = [];


            nodes.forEach(function(d) {
                map[d.data.name] = d;
            });

            nodes.forEach(function(d) {
                if (d.data.imports) d.data.imports.forEach(function(i) {
                    imports.push(map[d.data.name].path(map[i]));
                });
            });
            return imports;
        }

        $("#openDocBtn").css("cursor", "pointer");
        function openDoc() {
            let url = $('#myPopup').attr("data-url")
            console.log('url is', url)
            window.open(url);
        }
    </script>
</body>
</html>